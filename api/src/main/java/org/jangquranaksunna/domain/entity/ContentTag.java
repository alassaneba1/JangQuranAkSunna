package org.jangquranaksunna.domain.entity;

import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import org.springframework.data.annotation.CreatedDate;
import org.springframework.data.jpa.domain.support.AuditingEntityListener;

import java.time.LocalDateTime;

/**
 * Entité de relation entre Content et Tag
 * Permet d'associer des tags à un contenu avec des métadonnées supplémentaires
 */
@Entity
@Table(name = "content_tags", 
    uniqueConstraints = @UniqueConstraint(columnNames = {"content_id", "tag_id"}),
    indexes = {
        @Index(name = "idx_content_tags_content", columnList = "content_id"),
        @Index(name = "idx_content_tags_tag", columnList = "tag_id"),
        @Index(name = "idx_content_tags_theme", columnList = "theme_id")
    }
)
@EntityListeners(AuditingEntityListener.class)
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class ContentTag {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "content_id", nullable = false)
    private Content content;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "tag_id", nullable = false)
    private Tag tag;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "theme_id")
    private Theme theme;

    @Column(name = "relevance_score")
    @Builder.Default
    private Double relevanceScore = 1.0;

    @Column(name = "is_primary")
    @Builder.Default
    private Boolean isPrimary = false;

    @Column(name = "added_by_user_id")
    private Long addedByUserId;

    @Enumerated(EnumType.STRING)
    @Builder.Default
    private TagSource source = TagSource.MANUAL;

    @Column(name = "confidence_score")
    private Double confidenceScore;

    @CreatedDate
    @Column(name = "created_at", nullable = false, updatable = false)
    private LocalDateTime createdAt;

    // Enums
    public enum TagSource {
        MANUAL,           // Ajouté manuellement par un utilisateur
        AUTOMATIC,        // Ajouté automatiquement par IA/algorithme
        IMPORT,           // Importé depuis une source externe
        SUGGESTED,        // Suggéré par le système et approuvé
        COMMUNITY,        // Ajouté par la communauté
        MODERATOR         // Ajouté par un modérateur
    }

    // Helper methods
    public boolean isHighRelevance() {
        return relevanceScore != null && relevanceScore >= 0.8;
    }

    public boolean isLowRelevance() {
        return relevanceScore != null && relevanceScore < 0.3;
    }

    public boolean isAutoGenerated() {
        return source == TagSource.AUTOMATIC || source == TagSource.SUGGESTED;
    }

    public boolean isUserGenerated() {
        return source == TagSource.MANUAL || source == TagSource.COMMUNITY;
    }

    public boolean isHighConfidence() {
        return confidenceScore != null && confidenceScore >= 0.8;
    }

    public String getSourceDisplayName() {
        return switch (source) {
            case MANUAL -> "Manuel";
            case AUTOMATIC -> "Automatique";
            case IMPORT -> "Importé";
            case SUGGESTED -> "Suggéré";
            case COMMUNITY -> "Communauté";
            case MODERATOR -> "Modérateur";
        };
    }
}
